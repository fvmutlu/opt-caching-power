% Function that builds the network graph within the cell
% This function is usually called right after cellDistribution and uses
% values generated by that function. It first calculates the cost of each
% edge by taking the Euclidean distance between the two nodes that make the
% edge, and raising it to the power of alpha, or 'pathloss_exponent'. Where
% distances are smaller than 1, the costs are fixed at 1 to avoid
% counter-intuitive behavior of this computation where a small enough
% distance could lead to an almost zero edge cost. Then using the routing
% edges as determined in cellDistribution and the costs calculated as
% described above, it builds a directed graph. Then some auxiliary values
% are that are helpful in later computations are calculated and a scatter
% plot of the graph showing the topology of the cell and each path is
% drawn if 'plots_enabled' is set to 1. Keep in mind that if you're running
% a simulation with many iterations, having this option on will mean each
% randomized graph will be drawn, which can lead to memory issues and a
% major slowdown of the simulation process.
% Last edited: 8/28/2020
% Faruk Volkan Mutlu

function [gains,costs,G,paths,pathcosts,edgepaths] = graphConstruction(alpha,distances_routing,distances_all,v1_routing,v2_routing,C_sc,C_mc,U,V,SC,R,u_nodes,edges_routing,edges_all,R_cell,V_pos,SC_pos,plots_enabled)
    gains = distances_all.^(-alpha); % Calculated for all edges since gains are a factor in interference
    costs = [max(1,distances_routing.^alpha) C_sc*ones(1,SC) C_mc]; % Calculated for edges involved only in routing, not interference
    G = digraph(v1_routing,v2_routing,costs); % Generate directed graph
    
    paths = cell(1,U); % Cell for holding resulting shortest paths
    pathcosts = zeros(1,U); % Link cost of each path
    
    for u=1:U 
        [paths{u},pathcosts(u)] = shortestpath(G,V+1,u_nodes(u)); % backhaul node is node V+1 so all paths are to that node
    end
    
    edgepaths = cell(1,numel(paths)); % Cell that contains each path in the form of edge numbers, useful for power calculations later on
    
    for x=1:numel(paths)
        for y=1:numel(paths{x})-1
            e1=find(edges_routing(:,1)==paths{x}(y));
            e2=find(edges_routing(e1,2)==paths{x}(y+1));
            if isempty(e2)
                e1=find(edges_routing(:,1)==paths{x}(y+1));
                e2=find(edges_routing(e1,2)==paths{x}(y));
            end
            edgepaths{x}(1,y) = e1(e2);
        end
    end
    
    pos = [950,200,500,380];

    %TO DO: Extend graph preferences functionality
    if(plots_enabled)
        figure('Position',pos);
        topology_plot = scatter(V_pos(:,1),V_pos(:,2),'filled');
        hold on
        scatter(SC_pos(:,1),SC_pos(:,2),'filled');
        th = 0:pi/50:2*pi;
        xunit = R_cell * cos(th);
        yunit = R_cell * sin(th);
        plot(xunit, yunit);
        hold off;
        axis([-R_cell R_cell -R_cell R_cell]);
        pbaspect([1 1 1])

        figure('Position',pos); % Graph plot with paths    
        graph_plot = plot(G,'XData',[V_pos(:,1);R_cell],'YData',[V_pos(:,2);R_cell],'EdgeColor','w');
        hold on
        scatter(SC_pos(:,1),SC_pos(:,2),'filled');
        axis([-R_cell R_cell -R_cell R_cell]);
        pbaspect([1 1 1])        
        for x=1:R
            highlight(graph_plot,paths{x},'EdgeColor','b','LineWidth',2.0);
        end
    end
end